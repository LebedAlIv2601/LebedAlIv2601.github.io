import KvsService from "./KvsService"

export default class KvsRepository {

    static async getKvsFeatures(){
        const featuresList = (await KvsService.getKvsFeatures()).data.result.data
        const remoteValues = (await KvsService.getKvsRemoteValues()).data.result.data
        return {
            features: mapToModel(featuresList),
            remoteValues: mapToModel(remoteValues),
            teamsList: getTeamsList(featuresList, remoteValues)
        }
    }

}

const PALETTE = [
  { bg: '#20c997', text: 'white' },   // –±–∏—Ä—é–∑–æ–≤—ã–π
  { bg: '#6610f2', text: 'white' },   // –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  { bg: '#ffc107', text: 'black' },   // —è–Ω—Ç–∞—Ä–Ω—ã–π
  { bg: '#6f42c1', text: 'white' },   // –ø—É—Ä–ø—É—Ä–Ω—ã–π
  { bg: '#0dcaf0', text: 'black' },   // –≥–æ–ª—É–±–æ–π
  { bg: '#343a40', text: 'white' },   // —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π
  { bg: '#e83e8c', text: 'white' },   // —Ä–æ–∑–æ–≤—ã–π
  { bg: '#28a745', text: 'white' },   // —Ç—Ä–∞–≤—è–Ω–æ–π –∑–µ–ª—ë–Ω—ã–π
  { bg: '#fdc500', text: 'black' },   // –∑–æ–ª–æ—Ç–∏—Å—Ç–æ-–∂—ë–ª—Ç—ã–π
  { bg: '#17a2b8', text: 'white' },   // –±–∏—Ä—é–∑–æ–≤—ã–π —Ç—ë–º–Ω—ã–π
  { bg: '#ff5733', text: 'white' },   // –∫–æ—Ä–∞–ª–ª–æ–≤—ã–π
  { bg: '#6ab04c', text: 'white' },   // –ª–∞–π–º–æ–≤–æ-–∑–µ–ª—ë–Ω—ã–π
  { bg: '#d35400', text: 'white' },   // –∫–∏—Ä–ø–∏—á–Ω—ã–π
  { bg: '#9b59b6', text: 'white' },   // —Å–∏—Ä–µ–Ω–µ–≤—ã–π
  { bg: '#2c3e50', text: 'white' },   // —Ç—ë–º–Ω—ã–π –∏–Ω–¥–∏–≥–æ
];

// üéØ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
const FIXED_COLORS = {
  green:   { bg: '#198754', text: 'white' },
  orange:  { bg: '#fd7e14', text: 'white' },
  blue:    { bg: '#0d6efd', text: 'white' },
  yellow:  { bg: '#FDE910', text: 'black' },
  supplies:{ bg: '#cc338b', text: 'white' },
  ads:     { bg: '#d10404', text: 'white' },
  common:  { bg: '#6c757d', text: 'white' }
};


function getTeamsList(features, remoteValues) {
   // 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
  const teamsSet = new Set([
    ...features.map((f) => f.team),
    ...remoteValues.map((r) => r.team),
  ]);

  // 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
  const teams = Array.from(teamsSet).sort((a, b) => a.localeCompare(b));

  // 3. –ù–∞–∑–Ω–∞—á–∞–µ–º —Ü–≤–µ—Ç–∞
  let paletteIndex = 0;
  const teamsWithColors = teams.map((team) => {
    // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    if (FIXED_COLORS[team]) {
      return { name: team, ...FIXED_COLORS[team] };
    }

    // —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
    const colorPair = PALETTE[paletteIndex % PALETTE.length];
    paletteIndex++;

    return { name: team, ...colorPair };
  });

  return teamsWithColors;
}

function mapToModel(list) {
    const newList = list.map((item) => {
        const localizations = item.value.localizations
        return {
            name: item.name, 
            team: item.team, 
            releaseVersion: item.version,
            hasBeta: Object.keys(localizations).find(localization => {
                return Object.keys(localizations[localization].platforms).find(platform => {
                    return localizations[localization].platforms[platform]?.beta !== undefined
                }) !== undefined
            }) !== undefined,
            createdAt: item.createdAt,
            description: item.description, 
            localizations: Object.keys(localizations)
            .sort((a, b) => sortAlphabetWithDefault(a, b))
            .map(localization => ({
                name: localization,
                platforms: Object.keys(localizations[localization].platforms)
                .sort((a, b) => a.localeCompare(b))
                .map(platform => {
                    const versionsList = Object.keys(localizations[localization].platforms[platform].versions)
                        .sort((a, b) => sortVersions(a, b))
                        .map(version => {
                            const versionValue = localizations[localization].platforms[platform].versions[version]
                            if(versionValue?.os !== undefined) {
                                const keysWithValues = Object.keys(versionValue.os)
                                    .map(os => {
                                        return os + ": " + versionValue.os[os]
                                    })
                                return {
                                    name: version,
                                    value: "OS: " + keysWithValues.join(" | ")
                                }
                            } else {
                                return {
                                    name: version,
                                    value: versionValue
                                }
                            }
                        })
                    if(localizations[localization].platforms[platform]?.beta !== undefined) {
                        versionsList.push(
                            {
                                name: "beta",
                                value: localizations[localization].platforms[platform]?.beta
                            }
                        )
                    }
                    return {
                        name: platform,
                        versions: versionsList
                    }
                })
            }))
        }
    })
    return newList.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
}

function sortVersions(a, b) {
    if (a === "default") return -1;
    if (b === "default") return 1;
    let left = getArrayFromVersion(a);
    let right = getArrayFromVersion(b);
    if (isLessVersion(left, right)) {
        return -1;
    }
    if (!isLessVersion(left, right)) {
        return 1;
    }
    return 0;
}

//–ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –∫–ª—é—á–∞ –≤–µ—Ä—Å–∏–∏
function getArrayFromVersion(value) {
    const arrayFromVersion = value.split(".", 3);
    const nums = arrayFromVersion.map((item) => Number(item));
    return nums.filter((item) => !isNaN((item)));
}

function isLessVersion(compared, for–°omparison) {
    if (compared[0] < for–°omparison[0]) {
        return true;
    } else if (compared[0] <= for–°omparison[0] && compared[1] < for–°omparison[1]) {
        return true;
    } else {
        return compared[0] <= for–°omparison[0] && compared[1] <= for–°omparison[1] && compared[2] < for–°omparison[2];
    }
}

function sortAlphabetWithDefault(a, b) {
    if (a === "default") return -1; // "default" –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–º
    if (b === "default") return 1;  // "default" –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–º
    return a.localeCompare(b);
}